apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  driftDetection:
    mode: enabled
    ignore:
      # Ignore "validated" annotation which is not inserted during install
      - paths: [ "/metadata/annotations/prometheus-operator-validated" ]
        target:
          kind: PrometheusRule
  valuesFrom:
  - kind: ConfigMap
    name: flux-kube-state-metrics-config
    valuesKey: kube-state-metrics-config.yaml
  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
  values:
    alertmanager:
      ingress:
        enabled: true
        hosts:
          - alertmanager.${ts_net}
        ingressClassName: tailscale
        paths:
          - /
        tls:
          - hosts:
            -  alertmanager
      alertmanagerSpec:
        externalUrl: https://alertmanager.${ts_net}
        forceEnableClusterMode: true
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 10Gi
    prometheus:
      prometheusSpec:
        externalUrl: https://prometheus.${ts_net}
        retention: 30d
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 50Gi
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
      ingress:
        enabled: true
        hosts:
          - prometheus.${ts_net}
        ingressClassName: tailscale
        paths:
          - /
        tls:
          - hosts:
            -  prometheus
    grafana:
      defaultDashboardsTimezone: browser
      ingress:
        enabled: true
        hosts:
          - grafana.${ts_net}
        ingressClassName: tailscale
        tls:
          - hosts:
            -  grafana
      persistence:
        enabled: true
      grafana.ini:
        server:
          domain: grafana.${ts_net}
          root_url: https://grafana.${ts_net}
    kubeControllerManager:
      # Add all k3s Control-Plane IPs
      endpoints:
        - ${master_ip1}
      service:
        port: 10257
        targetPort: 10257
      serviceMonitor:
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      # Add all k3s Control-Plane IPs
      endpoints:
        - ${master_ip1}
      service:
        port: 10259
        targetPort: 10259
      serviceMonitor:
        https: true
        insecureSkipVerify: true
    kubeEtcd:
      # Add all k3s Control-Plane IPs
      endpoints:
        - ${master_ip1}
      service:
        port: 2381
        targetPort: 2381
    kubeProxy:
      service:
        port: 10249
        targetPort: 10249
        selector:
          k8s-app: pushprox-kube-proxy-client
      serviceMonitor:
        proxyUrl: http://pushprox-kube-proxy-proxy.kube-system.svc:8080
        https: false
        relabelings:
          - action: replace
            sourceLabels:
              - __meta_kubernetes_pod_ip
            targetLabel: pod_ip
          - action: replace
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: instance

    prometheus-node-exporter:
      hostNetwork: false
      hostPID: false
      prometheus:
        monitor:
          relabelings:
            - action: replace
              sourceLabels:
                - __meta_kubernetes_pod_ip
              targetLabel: pod_ip
            - action: replace
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: instance